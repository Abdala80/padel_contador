from asyncio import _enter_task
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.graphics import Color, Rectangle


class TeamColumn(BoxLayout):
    def __init__(self, team_name, **kwargs):
        super(TeamColumn, self).__init__(**kwargs)
        self.orientation = 'vertical'
        self.team_name = team_name  

        team_name_label = Label(text=team_name,  font_size=30, color=(0, 0, 0, 1))  
        self.add_widget(team_name_label)     

        self.points_label = Label(text='0', font_size=80, color=(0, 0, 0, 1))
        self.add_widget(self.points_label)

        button_layout = BoxLayout(orientation='horizontal', size_hint_y=1.2)
        button_layout.add_widget(Button(text='+', on_press=self.increment_points, font_size=40,  background_color=(1.0, 1.0, 1.0, 1)))
        button_layout.add_widget(Button(text='-', on_press=self.decrement_points, font_size=40,  background_color=(0.5, 0.5, 0.5, 1)))
        self.add_widget(button_layout)

        self.points = 0
        self.games = 0
        self.sets = 0
        self.games_sets_label = Label(text='Jogos: 0 | Sets: 0', font_size=40, color=(0, 0, 0, 1))
        self.add_widget(self.games_sets_label)

        #variable de Estado tie-break
        #self.tiebreak_mode = True

    def regular_score_logic(self):
        if self.points == 0:
            self.points = 15
        elif self.points == 15:
            self.points = 30
        elif self.points == 30:
            self.points = 40
        elif self.points == 40:
            if self.opponent.points < 40 or (self.opponent.points == 40 and self.points == 40):
                self.games += 1
                self.opponent.reset_points()
            else:
                self.reset_points()
        elif self.points == 'Deuce':
            self.reset_points()
        elif self.points == 'Advantage':
            self.games += 1
            self.opponent.reset_points()

        if self.games >= 6:
            self.sets += 1
            self.games = 0
            self.opponent.games = 0      
        
                         
                                
    def tiebreak_score_logic(self):
        # Verificar al llegar a 7 puntos
        if self.points >= 7 and (self.points - self.opponent.points) >= 2:                
            self.games += 1                                 
                                    
        # Verificar si se ganó el juego y comprobar si se ganó la partida (2 sets)
        if self.games >= 6:
            self.sets += 1
            self.reset_game()
            self.opponent.reset_points()
            
            if self.sets == 2:
                self.end_game()

        self.update_labels()


    def manage_games_sets(self):
        if self.games == 6:
            if self.sets < 2:
                self.sets += 1
                self.games = 0
                self.opponent.games = 0
            else:
                self.end_game()  # Puedes agregar lógica adicional aquí si es necesario
        elif self.games == 5 and self.opponent.games == 5: 
            # and self.tiebreak_mode == True:
            self.show_tiebreak_popup()                        
        else:
            self.update_labels()

        if self.sets == 2:
            self.end_game()  # Puedes agregar lógica adicional aquí si es necesario


    def end_game(self):
        if self.sets == 2:
            winner_name = self.team_name
            self.show_game_over_popup(winner_name)
            self.sets = 0
            self.games = 0
            self.opponent.sets = 0
            self.opponent.games = 0

    def show_game_over_popup(self, winner_name):
        content = BoxLayout(orientation='vertical')
        content.add_widget(Label(text=f'{self.team_name} É O VENCEDOR!', font_size=24))
        
        button_layout = BoxLayout(size_hint_y=None, height=50)

        btn_restart = Button(text='Reiniciar Marcador', size_hint=(None, None), size=(150, 50))
        btn_restart.bind(on_press=lambda instance: self.reset_score(popup))
        button_layout.add_widget(btn_restart)

        btn_exit = Button(text='SAIR', size_hint=(None, None), size=(100, 50))
        btn_exit.bind(on_press=lambda instance: self.close_app())
        button_layout.add_widget(btn_exit)

        content.add_widget(button_layout)

        popup = Popup(title='Fim da Partida', content=content, size_hint=(None, None), size=(400, 200))
        popup.open()

    def show_tiebreak_popup(self):
        content = BoxLayout(orientation='vertical')
        content.add_widget(Label(text="Inicio do TIE BREAK", font_size=24))

        button_layout = BoxLayout(size_hint_y=None, height=80)

        btn_yes = Button(text='COMEÇAR', size_hint=(None, None), size=(100, 50))
        btn_yes.bind(on_press=self.start_tiebreak)
        button_layout.add_widget(btn_yes)

        content.add_widget(button_layout)

        self.tiebreak_popup = Popup(title='Empate a 5 Jogos', content=content, size_hint=(None, None), size=(400, 200))
        self.tiebreak_popup.open()

    def start_tiebreak(self, instance):        
        self.tiebreak_popup.dismiss()
        self.reset_points()
        self.tiebreak_score_logic()       

    def reset_score(self, popup):
        self.points = 0
        self.games = 0
        self.sets = 0
        self.opponent.points = 0
        self.opponent.games = 0
        self.opponent.sets = 0
        self.update_labels()
        popup.dismiss()

    def reset_points(self):
        self.points = 0
        self.opponent.points = 0
        self.update_labels()
    
    def reset_game(self):
        self.reset_points()
        self.games = 0
        self.opponent.games = 0
        self.update_labels()

    def increment_points(self, instance):
        if self.games == 5 and self.opponent.games == 5:
            self.points += 1
            self.tiebreak_score_logic()
        else:
            self.regular_score_logic()
            self.update_labels()
            self.manage_games_sets()
            self.end_game()

    def decrement_points(self, instance):
        if self.points > 0:
            if self.points == 'Advantage':
                self.points = 'Deuce'
            elif self.points == 'Deuce':
                self.reset_points()
            elif self.points == 40:
                self.points = 30
            elif self.points == 30:
                self.points = 15
            elif self.points == 15:
                self.points = 0
            else: 
                self.points += -1

        self.update_labels()

    def close_app(self):
        App.get_running_app().stop()

    def update_labels(self):
        self.points_label.text = str(self.points)
        self.games_sets_label.text = f'Jogos: {self.games} | Sets: {self.sets}'

class PadelApp(App):
    def build(self):
        team_branco = TeamColumn(team_name='TIME BRANCO')
        team_azul = TeamColumn(team_name='TIME AZUL')
        team_branco.opponent = team_azul
        team_azul.opponent = team_branco

        main_layout = BoxLayout(orientation='horizontal')

        # Establecer el color de fondo del diseño principal
        main_layout.canvas.before.clear()
        with main_layout.canvas.before:
            Color(0.5, 0.8, 0.9, 4)  # RGBA: 0.2, 0.2, 0.2 (gris oscuro), alpha: 1 (opacidad completa)
            Rectangle(pos=main_layout.pos, size=(main_layout.width * 8, main_layout.height * 8))

        main_layout.add_widget(team_branco)
        main_layout.add_widget(team_azul)
        
        return main_layout

if __name__ == '__main__':
    PadelApp().run()
